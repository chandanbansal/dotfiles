#!/usr/bin/env python3
from __future__ import print_function
from shutil import copy
from os import makedirs
from os import mkdir
from os import path
from os import getenv
from os import listdir
from os import environ
from os import unlink
import sys
from subprocess import call

script_dir = path.dirname(path.realpath(__file__))

profile_search_paths = [
    # linux
    path.expanduser("~/.mozilla/firefox/"),
    # windows
    path.join(getenv("APPDATA", ""), "Mozilla", "Firefox", "Profiles"),
    # mac
    path.expanduser("~/Library/Application Support/Firefox/Profiles/"),
    path.expanduser("~/Library/Mozilla/Firefox/Profiles/"),
]

# in case we're on os x
environ["PATH"] = environ["PATH"] + ":/Applications/Firefox.app/Contents/MacOS/"


def find_profiles():
    for _path in profile_search_paths:
        if path.isdir(_path):
            for d in listdir(_path):
                profile = path.join(_path, d)
                # polluted namespace, for sure. For now this works.
                if path.isdir(profile) and "." in path.basename(profile):
                    yield profile


def create_initial_profile():
    # unfortunate;y this is the only way of creating an initial profile that
    # firefox will use on first start nowadays. Screenshot is captured so the browser exits.
    call(["firefox", "-no-remote", "--screenshot"])
    # will not create first run
    if path.isfile("screenshot.png"):
        unlink("screenshot.png")


profiles = list(find_profiles())

# firefox is not running, and has never been run
if len(profiles) == 0:
    create_initial_profile()
    profiles = list(find_profiles())

if len(profiles) == 0:
    print("Firefox profile could not be found or created")
    sys.exit(1)

# apply to all matching profiles
for profile in profiles:
    print("Installing to " + profile)
    chrome_dir = path.join(profile, "chrome")
    extensions_dir = path.join(profile, "extensions")

    copy(path.join(script_dir, "user.js"), profile)

    for d in [chrome_dir, extensions_dir]:
        if not path.isdir(d):
            makedirs(d)

    copy(path.join(script_dir, "chrome/UserChrome.css"), chrome_dir)
    copy(path.join(script_dir, "chrome/UserContent.css"), chrome_dir)


    # copy extensions; only if they don't exist as FF manages updates to them
    # automatically. Note they must be signed unless Firefox ESR is used and
    # configured correctly. Using unsigned extensions is not recommended.
    for e in listdir(path.join(script_dir, "extensions")):
        source = path.join(script_dir, "extensions", e)
        target = path.join(extensions_dir, e)
        if e.endswith('.xpi') and not path.isfile(target):
            copy(source, target)
